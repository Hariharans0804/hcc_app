import React from "react";
import { View, Text, TouchableOpacity, StyleSheet } from "react-native";
import { createDrawerNavigator } from "@react-navigation/drawer";
import { NavigationContainer } from "@react-navigation/native";
import Ionicons from "react-native-vector-icons/Ionicons";

const Drawer = createDrawerNavigator();

const HomeScreen = () => (
  <View style={styles.screenContainer}>
    <Text style={styles.screenText}>Home Screen</Text>
  </View>
);

const ProfileScreen = () => (
  <View style={styles.screenContainer}>
    <Text style={styles.screenText}>Profile Screen</Text>
  </View>
);

export default function App() {
  return (
    <NavigationContainer>
      <Drawer.Navigator
        screenOptions={({ navigation }) => ({
          headerRight: () => (
            <TouchableOpacity
              onPress={() => alert("Notifications")}
              style={{ marginRight: 15 }}
            >
              <Ionicons name="notifications-outline" size={25} color="#000" />
            </TouchableOpacity>
          ),
          drawerStyle: {
            backgroundColor: "#f2f2f2", // Drawer background color
            width: 250, // Drawer width
          },
          drawerActiveTintColor: "#ffffff", // Active item text color
          drawerActiveBackgroundColor: "#007BFF", // Active item background color
          drawerInactiveTintColor: "#000000", // Inactive item text color
          drawerLabelStyle: {
            fontSize: 16,
            fontWeight: "bold",
          },
          headerTitleAlign: "center", // Optional: Center align the header title
        })}
      >
        <Drawer.Screen
          name="Home"
          component={HomeScreen}
          options={{
            drawerIcon: ({ color, size }) => (
              <Ionicons name="home-outline" size={size} color={color} />
            ),
          }}
        />
        <Drawer.Screen
          name="Profile"
          component={ProfileScreen}
          options={{
            drawerIcon: ({ color, size }) => (
              <Ionicons name="person-outline" size={size} color={color} />
            ),
          }}
        />
      </Drawer.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  screenContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#fff",
  },
  screenText: {
    fontSize: 24,
    fontWeight: "bold",
  },
});

================================================================================================
================================================================================================


import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  FlatList,
  Modal,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  StatusBar,
} from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons";
import FontAwesome from "react-native-vector-icons/FontAwesome";
import AntDesign from "react-native-vector-icons/AntDesign";

const CollectionListScreen = () => {
  const [selectedItem, setSelectedItem] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [modalType, setModalType] = useState(""); // To differentiate between "view" and "refresh"
  const [updatedText, setUpdatedText] = useState(""); // Text input value for refresh

  const data = [
    { id: 1, name: "hariharan", mobile: 1234567890, total: 1000, paid: 500, pending: 500, time: "1.00 AM" },
    { id: 2, name: "vishwa", mobile: 2345678901, total: 1000, paid: 200, pending: 800, time: "2.00 AM" },
    // Add more items as needed...
  ];

  const handlePressItem = (item, type) => {
    setSelectedItem(item);
    setModalType(type);
    setModalVisible(true);
  };

  const renderItem = ({ item }) => (
    <View style={styles.row}>
      <Text style={[styles.cell, { width: 45 }]}>{item.id}</Text>
      <Text style={[styles.cell, { width: 150 }]}>{item.name}</Text>
      <Text style={[styles.cell, { width: 150 }]}>{item.mobile}</Text>
      <Text style={[styles.cell, { width: 100 }]}>{item.total}</Text>
      <Text style={[styles.cell, { width: 100 }]}>{item.paid}</Text>
      <Text style={[styles.cell, { width: 100 }]}>{item.pending}</Text>
      <Text style={[styles.cell, { width: 120 }]}>{item.time}</Text>
      <View style={[styles.buttonContainer, { width: 120 }]}>
        <TouchableOpacity style={styles.viewButton} onPress={() => handlePressItem(item, "view")}>
          <Ionicons name="eye" size={20} color="#000" />
          <Text style={styles.buttonText}>View</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.updateButton} onPress={() => handlePressItem(item, "refresh")}>
          <FontAwesome name="pencil-square-o" size={20} color="#fff" />
          <Text style={styles.buttonText}>Refresh</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#000" />
      <View style={styles.dataContainer}>
        <ScrollView horizontal>
          <View style={styles.listContainer}>
            <FlatList data={data} keyExtractor={(item) => item.id.toString()} renderItem={renderItem} />
          </View>
        </ScrollView>
      </View>

      {/* Modal */}
      <Modal animationType="slide" transparent={true} visible={modalVisible}>
        <View style={styles.centeredView}>
          <View style={styles.modalView}>
            <TouchableOpacity style={styles.closeButton} onPress={() => setModalVisible(false)}>
              <AntDesign name="closecircleo" size={30} color="#fff" />
            </TouchableOpacity>
            <Text style={styles.modalText}>
              {modalType === "view" ? "View Details" : "Refresh Data"}
            </Text>

            {modalType === "view" && selectedItem && (
              <View style={styles.detailsContainer}>
                <Text style={styles.detailsText}>No: {selectedItem.id}</Text>
                <Text style={styles.detailsText}>Name: {selectedItem.name}</Text>
                <Text style={styles.detailsText}>Mobile: {selectedItem.mobile}</Text>
                <Text style={styles.detailsText}>Total: {selectedItem.total}</Text>
                <Text style={styles.detailsText}>Paid: {selectedItem.paid}</Text>
                <Text style={styles.detailsText}>Pending: {selectedItem.pending}</Text>
                <Text style={styles.detailsText}>Time: {selectedItem.time}</Text>
              </View>
            )}

            {modalType === "refresh" && (
              <View>
                <TextInput
                  style={styles.textInput}
                  placeholder="Enter updated data"
                  value={updatedText}
                  onChangeText={setUpdatedText}
                />
                <TouchableOpacity style={styles.saveButton} onPress={() => console.log("Updated data:", updatedText)}>
                  <Text style={styles.saveButtonText}>Save</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: "#f5f5f5" },
  dataContainer: { flex: 1, marginTop: 10 },
  row: { flexDirection: "row", alignItems: "center", marginBottom: 10 },
  cell: { textAlign: "center", padding: 10, borderWidth: 1, borderColor: "#ddd" },
  buttonContainer: { flexDirection: "row", justifyContent: "space-around" },
  viewButton: { flexDirection: "row", alignItems: "center", backgroundColor: "#ddd", padding: 10, borderRadius: 5 },
  updateButton: { flexDirection: "row", alignItems: "center", backgroundColor: "#6200EE", padding: 10, borderRadius: 5 },
  buttonText: { marginLeft: 5, color: "#000", fontWeight: "bold" },
  centeredView: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "rgba(0, 0, 0, 0.5)" },
  modalView: { width: 300, padding: 20, backgroundColor: "#fff", borderRadius: 10, alignItems: "center" },
  closeButton: { position: "absolute", top: 10, right: 10 },
  modalText: { fontSize: 20, fontWeight: "bold", marginBottom: 20 },
  detailsContainer: { marginTop: 20 },
  detailsText: { fontSize: 16, marginBottom: 10 },
  textInput: { borderWidth: 1, borderColor: "#ddd", padding: 10, width: "100%", marginBottom: 20, borderRadius: 5 },
  saveButton: { backgroundColor: "#28a745", padding: 10, borderRadius: 5 },
  saveButtonText: { color: "#fff", fontWeight: "bold" },
});

export default CollectionListScreen;

================================================================================================
================================================================================================


import React, { useState } from "react";
import { View, Text, StyleSheet, FlatList } from "react-native";

const Dummy = () => {
    // Old and new data
    const [oldData, setOldData] = useState([
        { id: 1, name: "John", age: 30 },
        { id: 2, name: "Jane", age: 25 },
    ]);

    const [newData, setNewData] = useState([
        { id: 1, name: "John", age: 30 },
        { id: 2, name: "Jane", age: 0 },
        { id: 3, name: "Mike", age: 28 },
        { id: 4, name: "Lucy", age: 22 },
        { id: 5, name: "Emma", age: 27 },
    ]);


    // Process data to assign separate serial numbers
    const processData = (oldData, newData) => {
        const oldIds = oldData.map((item) => item.id);

        // Separate new and old data
        const processedNewData = newData.map((item, index) => ({
            ...item,
            serialNo: index + 1, // New data starts from 1
            isNew: true,
        }));

        const processedOldData = oldData.map((item, index) => ({
            ...item,
            serialNo: index + 1, // Old data starts from 1 as well
            isNew: false,
        }));

        // Combine with new data first
        return [...processedNewData, ...processedOldData];
    };

    const processedData = processData(oldData, newData);


    return (
        <View style={styles.container}>
            <FlatList
                data={processedData}
                keyExtractor={(item) => item.id.toString()}
                renderItem={({ item }) => (
                    <View style={styles.itemContainer}>
                        {/* Show "NEW" label for new items */}
                        {item.isNew && <View style={styles.newLabelContainer}><Text style={styles.newLabel}>NEW</Text></View>}
                        <View style={styles.row}>
                            <Text style={styles.serialNo}>{item.serialNo}.</Text>
                            <Text style={styles.name}>{item.name}</Text>
                            <Text style={styles.age}>{item.age}</Text>
                        </View>
                    </View>
                )}
            />
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 20,
        backgroundColor: "#f5f5f5",
    },
    itemContainer: {
        position: "relative",
        backgroundColor: "#fff",
        padding: 15,
        marginBottom: 15,
        borderRadius: 10,
        borderWidth: 1,
        borderColor: "#ddd",
        overflow: 'hidden'
    },
    row: {
        flexDirection: "row",
        alignItems: "center",
    },
    serialNo: {
        width: 30,
        fontWeight: "bold",
    },
    name: {
        flex: 1,
        fontSize: 16,
    },
    age: {
        width: 50,
        textAlign: "right",
    },
    newLabelContainer: {
        position: "absolute",
        // top:0.5,
        // left: -11,
        top: 0,
        left: -16,
        backgroundColor: "red",
        transform: [{ rotate: "-45deg" }],
        zIndex: 1,
    },
    newLabel: {
        color: "white",
        fontWeight: "bold",
        fontSize: 8,
        paddingHorizontal: 15,
        // paddingVertical: 3,
        paddingTop: 4,
        paddingBottom: 2
        , textAlign: 'center'
    },
});

export default Dummy;

================================================================================================
================================================================================================

import { FlatList, ScrollView, StatusBar, StyleSheet, Text, TextInput, View } from 'react-native'
import React from 'react'
import { Separator } from '../components'
import { Colors, Fonts } from '../constants'
import { Display } from '../utils'
import Feather from 'react-native-vector-icons/Feather'

const HomeScreen = ({ navigation }) => {

  const newData = [
    { id: 1, name: 'hari', mobile: 1234567890, paid: 500 },
    { id: 2, name: 'vishwa', mobile: 2345678901, paid: 200 },
    { id: 3, name: 'ram', mobile: 3456789012, paid: 100 },
    { id: 4, name: 'raj', mobile: 4567890123, paid: 300 },
    { id: 5, name: 'karthik', mobile: 5678901234, paid: 400 },
  ];

  const oldData = [
    { id: 6, name: 'sathish', mobile: 6789012345, paid: 550 },
    { id: 7, name: 'mukilan', mobile: 7890123456, paid: 250 },
    { id: 8, name: 'jayaram', mobile: 8901234567, paid: 350 },
    { id: 9, name: 'surya', mobile: 9012345678, paid: 150 },
    { id: 10, name: 'ajith', mobile: 5432167890, paid: 450 },
    { id: 11, name: 'arun', mobile: 5432167890, paid: 450 },
    { id: 12, name: 'lenin', mobile: 5432167890, paid: 450 },
    { id: 13, name: 'ali', mobile: 5432167890, paid: 450 },
    { id: 14, name: 'boopathi', mobile: 5432167890, paid: 450 },
    { id: 15, name: 'sundar', mobile: 5432167890, paid: 450 },
  ];

  // Process data to assign separate serial numbers
  const processData = (oldData, newData) => {
    const oldIds = oldData.map((item) => item.id);

    // Separate new and old data
    const processedNewData = newData.map((item, index) => ({
      ...item,
      serialNo: index + 1, // New data starts from 1
      isNew: true,
    }));

    const processedOldData = oldData.map((item, index) => ({
      ...item,
      serialNo: index + 1, // Old data starts from 1 as well
      isNew: false,
    }));

    // Combine with new data first
    return [...processedNewData, ...processedOldData];
  };

  const processedData = processData(oldData, newData);

  const renderItem = ({ item }) => (
    <View style={styles.itemContainer}>
      {/* Show "NEW" label for new items */}
      {item.isNew && <View style={styles.newLabelContainer}><Text style={styles.newLabel}>NEW</Text></View>}
      <View style={styles.row}>
        <Text style={[styles.cell, styles.id]}>{item.serialNo}</Text>
        <Text style={[styles.cell, styles.name]}>{item.name}</Text>
        <Text style={[styles.cell, styles.mobile]}>{item.mobile}</Text>
        <Text style={[styles.cell, styles.paid]}>{item.paid}</Text>
      </View>
    </View>
  )

  return (
    <View style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.DEFAULT_LIGHT_GRAY} translucent />
      <Separator height={StatusBar.currentHeight} />

      <View style={styles.membersContainer}>
        <Text style={styles.membersText}>members</Text>
        <View style={styles.inputContainer}>
          <View style={styles.inputSubContainer}>
            <Feather
              name="search"
              size={20}
              color={Colors.DEFAULT_BLACK}
              style={{ marginRight: 10 }}
            />
            <TextInput
              placeholder='Search'
              placeholderTextColor={Colors.DEFAULT_BLACK}
              selectionColor={Colors.DEFAULT_DARK_GRAY}
              style={styles.inputText}
            />
          </View>
        </View>
      </View>

      <View style={styles.dataContainer}>
        <View style={styles.headerContainer}>
          <Text style={[styles.headerText, styles.idHeader]}>No</Text>
          <Text style={[styles.headerText, styles.nameHeader]}>Name</Text>
          <Text style={[styles.headerText, styles.mobileHeader]}>Mobile</Text>
          <Text style={[styles.headerText, styles.paidHeader]}>Paid</Text>
        </View>

        <FlatList
          data={processedData}
          keyExtractor={(item, index) => { item.id.toString() }}
          renderItem={renderItem}
          contentContainerStyle={styles.flatListContent}
        />
      </View>
    </View>
  )
}

export default HomeScreen

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.DEFAULT_LIGHT_GRAY,
  },
  membersContainer: {
    // borderWidth:1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginHorizontal: 15
  },
  membersText: {
    fontSize: 22,
    lineHeight: 22 * 1.4,
    fontFamily: Fonts.POPPINS_REGULAR,
    color: Colors.DEFAULT_BLACK,
  },
  inputContainer: {
    backgroundColor: Colors.DEFAULT_WHITE,
    paddingHorizontal: 10,
    marginHorizontal: 5,
    borderRadius: 10,
    borderWidth: 0.5,
    borderColor: Colors.DEFAULT_BLACK,
    elevation: 1,
    borderColor: Colors.DEFAULT_BLACK,
    justifyContent: 'center',
    // marginTop: 20,
    width: Display.setWidth(35),
  },
  inputSubContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  inputText: {
    fontSize: 15,
    lineHeight: 15 * 1.4,
    letterSpacing: 1,
    textAlignVertical: 'center',
    paddingVertical: 0,
    height: Display.setHeight(6),
    color: Colors.DEFAULT_BLACK,
    flex: 1,
    fontFamily: Fonts.POPPINS_SEMI_BOLD,
    paddingTop: 5,
  },
  dataContainer: {
    paddingVertical: 30,
    paddingHorizontal: 10,
    // marginBottom: 90,
    // borderWidth: 1,
    // borderColor: 'salmon',
  },
  headerContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    marginBottom: 10,
    backgroundColor: Colors.DEFAULT_WHITE,
    borderRadius: 8
  },
  headerText: {
    flex: 1,
    fontFamily: Fonts.POPPINS_MEDIUM,  // Change to the correct font if needed
    fontSize: 18,
    lineHeight: 18 * 1.4,
    textAlign: 'center',
    paddingHorizontal: 5,
    color: Colors.DEFAULT_BLACK,
  },
  idHeader: {
    flex: 0.5, // Control column width
  },
  nameHeader: {
    flex: 2,
  },
  mobileHeader: {
    flex: 2,
  },
  paidHeader: {
    flex: 1.5,
  },
  row: {
    flexDirection: 'row',
    // justifyContent: 'flex-start',
    alignItems: 'center',
    // marginVertical: 8,
    // marginHorizontal: 2,
    // elevation: 0.5,
    // borderRadius: 8,
    // borderWidth: 1,
    // borderColor: Colors.DEFAULT_DARK_GRAY,
    // padding: 10,
  },
  cell: {
    flex: 1,
    fontSize: 16,
    lineHeight: 16 * 1.4,
    fontFamily: Fonts.POPPINS_SEMI_BOLD, // Change to the correct font if needed
    textAlign: 'center',
    paddingHorizontal: 5,
    textTransform: 'capitalize'
  },
  id: {
    flex: 0.5, // Column width for id
  },
  name: {
    flex: 2,  // Column width for name
  },
  mobile: {
    flex: 2,  // Column width for mobile number
  },
  paid: {
    flex: 1.5, // Column width for paid
  },
  flatListContent: {
    paddingBottom: 100, // Add some padding to avoid the last item being cut off
  },
  itemContainer: {
    position: "relative",
    backgroundColor: Colors.DEFAULT_LIGHT_GRAY,
    padding: 15,
    marginBottom: 15,
    borderRadius: 10,
    borderWidth: 0.5,
    borderColor: Colors.DEFAULT_DARK_GRAY,
    overflow: 'hidden',
    elevation:2,
  },
  newLabelContainer: {
    position: "absolute",
    // top:0.5,
    // left: -11,
    top: 0,
    left: -16,
    backgroundColor: "red",
    transform: [{ rotate: "-45deg" }],
    zIndex: 1,
  },
  newLabel: {
    color: "white",
    fontWeight: "bold",
    fontSize: 8,
    paddingHorizontal: 15,
    // paddingVertical: 3,
    paddingTop: 4,
    paddingBottom: 2
    , textAlign: 'center'
  },
})

================================================================================================
================================================================================================

import { FlatList, ScrollView, StatusBar, StyleSheet, Text, TextInput, View } from 'react-native'
import React from 'react'
import { Separator } from '../components'
import { Colors, Fonts } from '../constants'
import { Display } from '../utils'
import Feather from 'react-native-vector-icons/Feather'

const CollectionListScreen = () => {

  const data = [
    { id: 1, name: 'hari', mobile: 1234567890, paid: 500 },
    { id: 2, name: 'vishwa', mobile: 2345678901, paid: 200 },
    { id: 3, name: 'ram', mobile: 3456789012, paid: 100 },
    { id: 4, name: 'raj', mobile: 4567890123, paid: 300 },
    { id: 5, name: 'karthik', mobile: 5678901234, paid: 400 },
    { id: 6, name: 'sathish', mobile: 6789012345, paid: 550 },
    { id: 7, name: 'mukilan', mobile: 7890123456, paid: 250 },
    { id: 8, name: 'jayaram', mobile: 8901234567, paid: 350 },
    { id: 9, name: 'surya', mobile: 9012345678, paid: 150 },
    { id: 10, name: 'ajith', mobile: 5432167890, paid: 450 },
    { id: 11, name: 'arun', mobile: 5432167890, paid: 450 },
    { id: 12, name: 'lenin', mobile: 5432167890, paid: 450 },
    { id: 13, name: 'ali', mobile: 5432167890, paid: 450 },
    { id: 14, name: 'boopathi', mobile: 5432167890, paid: 450 },
    { id: 15, name: 'sundar', mobile: 5432167890, paid: 450 },
  ]

  const renderItem = ({ item }) => (
    <View style={styles.row}>
      <Text style={[styles.cell, styles.id]}>{item.id}</Text>
      <Text style={[styles.cell, styles.name]}>{item.name}</Text>
      <Text style={[styles.cell, styles.mobile]}>{item.mobile}</Text>
      <Text style={[styles.cell, styles.paid]}>{item.paid}</Text>
    </View>
  )

  return (
    <View style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.DEFAULT_LIGHT_GRAY} translucent />
      <Separator height={StatusBar.currentHeight} />

      <View style={styles.membersContainer}>
        <Text style={styles.membersText}>members</Text>
        <View style={styles.inputContainer}>
          <View style={styles.inputSubContainer}>
            <Feather
              name="search"
              size={20}
              color={Colors.DEFAULT_BLACK}
              style={{ marginRight: 10 }}
            />
            <TextInput
              placeholder='Search'
              placeholderTextColor={Colors.DEFAULT_BLACK}
              selectionColor={Colors.DEFAULT_DARK_GRAY}
              style={styles.inputText}
            />
          </View>
        </View>
      </View>

      <View style={styles.dataContainer}>
        <View style={styles.headerContainer}>
        <Text style={[styles.headerText, styles.idHeader]}>No</Text>
        <Text style={[styles.headerText, styles.nameHeader]}>Name</Text>
        <Text style={[styles.headerText, styles.mobileHeader]}>Mobile</Text>
        <Text style={[styles.headerText, styles.paidHeader]}>Paid</Text>
        </View>

        <FlatList
          data={data}
          keyExtractor={(item, index) => { item.id.toString() }}
          renderItem={renderItem}
          contentContainerStyle={styles.flatListContent} 
        />
      </View>
    </View>
  )
}

export default CollectionListScreen

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.DEFAULT_LIGHT_GRAY,
  },
  membersContainer: {
    // borderWidth:1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginHorizontal: 15
  },
  membersText: {
    fontSize: 22,
    lineHeight: 22 * 1.4,
    fontFamily: Fonts.POPPINS_REGULAR,
    color: Colors.DEFAULT_BLACK,
  },
  inputContainer: {
    backgroundColor: Colors.DEFAULT_WHITE,
    paddingHorizontal: 10,
    marginHorizontal: 5,
    borderRadius: 10,
    borderWidth: 1.2,
    borderColor: Colors.DEFAULT_BLACK,
    justifyContent: 'center',
    // marginTop: 20,
    width: Display.setWidth(35),
  },
  inputSubContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  inputText: {
    fontSize: 15,
    lineHeight: 15 * 1.4,
    letterSpacing: 1,
    textAlignVertical: 'center',
    paddingVertical: 0,
    height: Display.setHeight(6),
    color: Colors.DEFAULT_BLACK,
    flex: 1,
    fontFamily: Fonts.POPPINS_SEMI_BOLD,
    paddingTop: 5,
  },
  dataContainer: {
    paddingVertical: 30,
    paddingHorizontal: 10,
    // marginBottom: 90,
  },
  headerContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    marginBottom:10
  },
  headerText: {
    flex: 1,
    fontFamily: Fonts.POPPINS_MEDIUM,  // Change to the correct font if needed
    fontSize: 18,
    lineHeight: 18 * 1.4,
    textAlign: 'center',
    paddingHorizontal: 5,
  },
  idHeader: {
    flex: 0.5, // Control column width
  },
  nameHeader: {
    flex: 2,
  },
  mobileHeader: {
    flex: 2,
  },
  paidHeader: {
    flex: 1.5,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    marginVertical: 8,
    marginHorizontal: 2,
    elevation: 1,
    borderRadius: 3,
    borderColor: '#fff',
    padding: 10,
    backgroundColor: '#f9f9f9',
  },
  cell: {
    flex: 1,
    fontSize: 16,
    lineHeight: 16 * 1.4,
    fontFamily: Fonts.POPPINS_SEMI_BOLD, // Change to the correct font if needed
    textAlign: 'center',
    paddingHorizontal: 5,
  },
  id: {
    flex: 0.5, // Column width for id
  },
  name: {
    flex: 2,  // Column width for name
  },
  mobile: {
    flex: 2,  // Column width for mobile number
  },
  paid: {
    flex: 1.5, // Column width for paid
  },
  flatListContent: {
    paddingBottom: 100, // Add some padding to avoid the last item being cut off
  },
})

================================================================================================
================================================================================================

import { FlatList, ScrollView, StatusBar, StyleSheet, Text, TextInput, View } from 'react-native'
import React from 'react'
import { Separator } from '../components'
import { Colors, Fonts } from '../constants'
import { Display } from '../utils'
import Feather from 'react-native-vector-icons/Feather'

const HistoryScreen = () => {

  const data = [
    { id: 1, name: 'hari', mobile: 1234567890, paid: 500 },
    { id: 2, name: 'vishwa', mobile: 2345678901, paid: 200 },
    { id: 3, name: 'ram', mobile: 3456789012, paid: 100 },
    { id: 4, name: 'raj', mobile: 4567890123, paid: 300 },
    { id: 5, name: 'karthik', mobile: 5678901234, paid: 400 },
    { id: 6, name: 'sathish', mobile: 6789012345, paid: 550 },
    { id: 7, name: 'mukilan', mobile: 7890123456, paid: 250 },
    { id: 8, name: 'jayaram', mobile: 8901234567, paid: 350 },
    { id: 9, name: 'surya', mobile: 9012345678, paid: 150 },
    { id: 10, name: 'ajith', mobile: 5432167890, paid: 450 },
    { id: 11, name: 'arun', mobile: 5432167890, paid: 450 },
    { id: 12, name: 'lenin', mobile: 5432167890, paid: 450 },
    { id: 13, name: 'ali', mobile: 5432167890, paid: 450 },
    { id: 14, name: 'boopathi', mobile: 5432167890, paid: 450 },
    { id: 15, name: 'sundar', mobile: 5432167890, paid: 450 },
  ]

  const renderItem = ({ item }) => (
    <View style={styles.row}>
      <Text style={[styles.cell, styles.id]}>{item.id}</Text>
      <Text style={[styles.cell, styles.name]}>{item.name}</Text>
      <Text style={[styles.cell, styles.mobile]}>{item.mobile}</Text>
      <Text style={[styles.cell, styles.paid]}>{item.paid}</Text>
    </View>
  )

  return (
      <View style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={Colors.DEFAULT_LIGHT_GRAY} translucent />
      <Separator height={StatusBar.currentHeight} />

      <View style={styles.membersContainer}>
        <Text style={styles.membersText}>members</Text>
        <View style={styles.inputContainer}>
          <View style={styles.inputSubContainer}>
            <Feather
              name="search"
              size={20}
              color={Colors.DEFAULT_BLACK}
              style={{ marginRight: 10 }}
            />
            <TextInput
              placeholder='Search'
              placeholderTextColor={Colors.DEFAULT_BLACK}
              selectionColor={Colors.DEFAULT_DARK_GRAY}
              style={styles.inputText}
            />
          </View>
        </View>
      </View>

      <View style={styles.dataContainer}>
        <View style={styles.headerContainer}>
        <Text style={[styles.headerText, styles.idHeader]}>No</Text>
        <Text style={[styles.headerText, styles.nameHeader]}>Name</Text>
        <Text style={[styles.headerText, styles.mobileHeader]}>Mobile</Text>
        <Text style={[styles.headerText, styles.paidHeader]}>Paid</Text>
        </View>

        <FlatList
          data={data}
          keyExtractor={(item, index) => { item.id.toString() }}
          renderItem={renderItem}
          contentContainerStyle={styles.flatListContent} 
        />
      </View>
    </View>
  )
}

export default HistoryScreen

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.DEFAULT_LIGHT_GRAY,
  },
  membersContainer: {
    // borderWidth:1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginHorizontal: 15
  },
  membersText: {
    fontSize: 22,
    lineHeight: 22 * 1.4,
    fontFamily: Fonts.POPPINS_REGULAR,
    color: Colors.DEFAULT_BLACK,
  },
  inputContainer: {
    backgroundColor: Colors.DEFAULT_WHITE,
    paddingHorizontal: 10,
    marginHorizontal: 5,
    borderRadius: 10,
    borderWidth: 1.2,
    borderColor: Colors.DEFAULT_BLACK,
    justifyContent: 'center',
    // marginTop: 20,
    width: Display.setWidth(35),
  },
  inputSubContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  inputText: {
    fontSize: 15,
    lineHeight: 15 * 1.4,
    letterSpacing: 1,
    textAlignVertical: 'center',
    paddingVertical: 0,
    height: Display.setHeight(6),
    color: Colors.DEFAULT_BLACK,
    flex: 1,
    fontFamily: Fonts.POPPINS_SEMI_BOLD,
    paddingTop: 5,
  },
  dataContainer: {
    paddingVertical: 30,
    paddingHorizontal: 10,
    // marginBottom: 90,
  },
  headerContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    marginBottom:10
  },
  headerText: {
    flex: 1,
    fontFamily: Fonts.POPPINS_MEDIUM,  // Change to the correct font if needed
    fontSize: 18,
    lineHeight: 18 * 1.4,
    textAlign: 'center',
    paddingHorizontal: 5,
  },
  idHeader: {
    flex: 0.5, // Control column width
  },
  nameHeader: {
    flex: 2,
  },
  mobileHeader: {
    flex: 2,
  },
  paidHeader: {
    flex: 1.5,
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    marginVertical: 8,
    marginHorizontal: 2,
    elevation: 1,
    borderRadius: 3,
    borderColor: '#fff',
    padding: 10,
    backgroundColor: '#f9f9f9',
  },
  cell: {
    flex: 1,
    fontSize: 16,
    lineHeight: 16 * 1.4,
    fontFamily: Fonts.POPPINS_SEMI_BOLD, // Change to the correct font if needed
    textAlign: 'center',
    paddingHorizontal: 5,
  },
  id: {
    flex: 0.5, // Column width for id
  },
  name: {
    flex: 2,  // Column width for name
  },
  mobile: {
    flex: 2,  // Column width for mobile number
  },
  paid: {
    flex: 1.5, // Column width for paid
  },
  flatListContent: {
    paddingBottom: 100, // Add some padding to avoid the last item being cut off
  },
})